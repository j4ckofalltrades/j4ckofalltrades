<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on /home/j4ckofalltrades</title><link>https://jduabe.dev/posts/</link><description>Recent content in Posts on /home/j4ckofalltrades</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 19 Jun 2021 13:43:02 +0800</lastBuildDate><atom:link href="https://jduabe.dev/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Publishing to the npm registry</title><link>https://jduabe.dev/posts/npm-publish/</link><pubDate>Sat, 19 Jun 2021 13:43:02 +0800</pubDate><guid>https://jduabe.dev/posts/npm-publish/</guid><description>&lt;p>This guide walks you through the necessary steps to upload your package to the
&lt;a href="https://npmjs.com">npm registry&lt;/a> with some recommendations along the way.&lt;/p>
&lt;h2 id="setup-npm-account">
Setup npm account
&lt;a class="heading-link" href="#setup-npm-account">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Register for an &lt;a href="https://npmjs.com/signup">npm account&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Test your account by logging in using &lt;code>npm&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e"># you should be prompted for your username, password, and email address&lt;/span>
&lt;span style="color:#75715e"># and an OTP if you&amp;#39;ve enabled 2FA&lt;/span>
$ npm login
&lt;span style="color:#75715e"># this should print out your npm username&lt;/span>
$ npm whoami
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="dry-run-testing-your-package-locally">
Dry-run (Testing your package locally)
&lt;a class="heading-link" href="#dry-run-testing-your-package-locally">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>Test out your package locally to ensure that everything works before publihsing
it to the npm registry. You can do this by invoking &lt;code>npm install&lt;/code> and providing
the path to your package e.g.:&lt;/p>
&lt;p>&lt;code>$ npm install /path/to/your/package&lt;/code>&lt;/p>
&lt;p>Another thing to do is to review the contents of the published package to make
sure that it doesn&amp;rsquo;t include any sensitive or unnecessary information. You can
perform a &lt;code>dry-run&lt;/code> with:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ npm publish --dry-run
&lt;span style="color:#75715e"># output should look something like&lt;/span>
npm notice
npm notice &amp;lt;package_name@version&amp;gt;
npm notice &lt;span style="color:#f92672">===&lt;/span> Tarball Contents &lt;span style="color:#f92672">===&lt;/span>
npm notice &amp;lt;tarball_contents_here&amp;gt;
npm notice &lt;span style="color:#f92672">===&lt;/span> Tarball Details &lt;span style="color:#f92672">===&lt;/span>
npm notice &amp;lt;tarball_details_here&amp;gt;
npm notice
+ &amp;lt;package_name@version&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Additionally you can create a &lt;code>.npmignore&lt;/code> file to exclude files that you don&amp;rsquo;t
want to publish to the registry.&lt;/p>
&lt;h2 id="publishing-to-the-npm-registry">
Publishing to the npm registry
&lt;a class="heading-link" href="#publishing-to-the-npm-registry">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>In your package&amp;rsquo;s root directory, execute:&lt;/p>
&lt;p>&lt;code>$ npm publish&lt;/code>&lt;/p>
&lt;p>If publishing a scoped public package, execute:&lt;/p>
&lt;p>&lt;code>$ npm publish --access public&lt;/code>&lt;/p>
&lt;p>When the publish process finishes, you should be able to see your public
package page at &lt;a href="https://npmjs.com/package/your-package-name">https://npmjs.com/package/your-package-name&lt;/a>.&lt;/p>
&lt;p>Congrats, you&amp;rsquo;ve successfully published your package to the npm registry. 🎉&lt;/p>
&lt;h2 id="bonus-automation-with-github-packages">
Bonus: Automation with GitHub Packages
&lt;a class="heading-link" href="#bonus-automation-with-github-packages">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>You&amp;rsquo;ll probably want to automate this process as part of your CI/CD pipeline.
Here&amp;rsquo;s how to set it up using GitHub Actions.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Create a &lt;a href="https://docs.npmjs.com/creating-and-viewing-access-tokens">new npm access token&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Add the access token as a secret to your target GitHub repository. You can
find this under Settings &amp;gt; Secrets for your repo. Give the secret a name e.g.
&lt;code>NPM_TOKEN&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Create a GitHub action workflow file in your repo at
&lt;code>.github/workflows/npm-publish.yml&lt;/code> with the following contents:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Publish package to npm&lt;/span>
&lt;span style="color:#f92672">on&lt;/span>:
&lt;span style="color:#f92672">release&lt;/span>:
&lt;span style="color:#f92672">types&lt;/span>: [&lt;span style="color:#ae81ff">created]&lt;/span>
&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;span style="color:#f92672">build&lt;/span>:
&lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;span style="color:#f92672">permissions&lt;/span>:
&lt;span style="color:#f92672">contents&lt;/span>: &lt;span style="color:#ae81ff">read&lt;/span>
&lt;span style="color:#f92672">packages&lt;/span>: &lt;span style="color:#ae81ff">write&lt;/span>
&lt;span style="color:#f92672">steps&lt;/span>:
- &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v2&lt;/span>
- &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/setup-node@v1&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">node-version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;14.x&amp;#39;&lt;/span>
&lt;span style="color:#f92672">registry-url&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;https://registry.npmjs.org&amp;#39;&lt;/span>
- &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">npm install&lt;/span>
- &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">npm test&lt;/span>
- &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">npm run build&lt;/span>
&lt;span style="color:#75715e"># Publish to npm (append `--access public` for scoped packages)&lt;/span>
- &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">npm publish&lt;/span>
&lt;span style="color:#f92672">env&lt;/span>:
&lt;span style="color:#f92672">NODE_AUTH_TOKEN&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.NPM_TOKEN }}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This workflow will is triggered when a new release is created but you can
also configure it to be triggered when a different event happens e.g. when a
new tag gets pushed. Refer to the &lt;a href="https://docs.github.com/en/actions">GitHub Actions documentation&lt;/a>
for more configuration options.&lt;/p>
&lt;p>That&amp;rsquo;s it, time to get publishing.&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Publishing to PyPI</title><link>https://jduabe.dev/posts/pypi-publish/</link><pubDate>Sun, 13 Jun 2021 22:08:53 +0800</pubDate><guid>https://jduabe.dev/posts/pypi-publish/</guid><description>&lt;p>This guide walks you through the necessary steps to upload your package to the
🐍 Python Package Index (PyPI) with some recommendations along the way.&lt;/p>
&lt;h2 id="dry-run-publishing-to-testpypi">
Dry-run (Publishing to TestPyPI)
&lt;a class="heading-link" href="#dry-run-publishing-to-testpypi">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>&lt;em>This step is optional but recommended.&lt;/em>&lt;/p>
&lt;p>&lt;a href="https://test.pypi.org">TestPyPI&lt;/a> is a separate instance of the &lt;em>real&lt;/em> package
index which is intended for testing and experimentation. This is a good way to
test out your package before uploading to the real index.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Register an account for &lt;a href="https://test.pypi.org/account/register">TestPyPI&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Create a &lt;a href="https://test.pypi.org/manage/account/#api-tokens">TestPyPI API token&lt;/a>
&amp;ndash; make sure to set the scope to &amp;ldquo;Entire account&amp;rdquo;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;a href="https://packaging.python.org/key_projects/#twine">twine&lt;/a> to upload your
package&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ python3 -m pip install --upgrade twine
&lt;span style="color:#75715e"># replace dist with the directory where your distribution archive is located&lt;/span>
$ python3 -m twine upload --repository testpypi dist/*
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You will be prompted for your TestPyPI username and password. Use the
following values.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>username&lt;/th>
&lt;th>password&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>__token__&lt;/code>&lt;/td>
&lt;td>API token including the &lt;code>pypi-&lt;/code> prefix&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Alternatively you can also use a &lt;code>.pypirc&lt;/code> file to define your package
indexes config i.e. TestPyPI, PyPi. If you choose to go this route, create
a &lt;code>$HOME/.pypirc&lt;/code> file with the following contents:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">[testpypi]
username=__token__
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can also use the &lt;code>password&lt;/code> field and paste in your API token but the
recommended way is to use &lt;code>keyring&lt;/code> (which is installed by Twine) for saving
credentials such as API tokens and passwords. You can do so with:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ keyring set https://test.pypi.org/legacy/ &amp;lt;value_of_api_token&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once the upload process has finished, you should be able to view your
package on TestPyPI at &lt;a href="https://test.pypi.org/project/your-package-name">https://test.pypi.org/project/your-package-name&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Installing and testing out your package&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ python3 -m pip install &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span>--index-url https://test.pypi.org/simple/ --no-deps your-package
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that the &lt;code>no-deps&lt;/code> flag is specified as one or more of your package&amp;rsquo;s
dependencies might not be present in TestPyPI and may cause the installation
to fail.&lt;/p>
&lt;p>Once the installation has finished you can test it out by importing your
package.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ python3
&amp;gt;&amp;gt;&amp;gt; from example_package import your_function
&amp;gt;&amp;gt;&amp;gt; your_function.do_something&lt;span style="color:#f92672">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that the import package will always be &lt;code>example_package&lt;/code> regardless of
the &lt;code>name&lt;/code> you&amp;rsquo;ve configured for your package.&lt;/p>
&lt;p>That&amp;rsquo;s it, you can now try and upload your package to the &lt;em>real&lt;/em> index.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="publishing-to-pypi">
Publishing to PyPI
&lt;a class="heading-link" href="#publishing-to-pypi">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>The &lt;a href="#dry-run-publishing-to-testpypi">steps&lt;/a> are identical with how you would
upload a package to TestPyPI. The main difference is that you&amp;rsquo;ll have to
register an account and create an API token at &lt;a href="https://pypi.org">PyPI&lt;/a>, as the
former is a separate instance of PyPI.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Register an account for &lt;a href="https://pypi.org/account/register">PyPI&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Create a &lt;a href="https://pypi.org/manage/account/#api-tokens">PyPI API token&lt;/a>
&amp;ndash; make sure to set the scope to &amp;ldquo;Entire account&amp;rdquo;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;a href="https://packaging.python.org/key_projects/#twine">twine&lt;/a> to upload your
package&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ python3 -m pip install --upgrade twine
&lt;span style="color:#75715e"># replace dist with the directory where your distribution archive is located&lt;/span>
$ python3 -m twine upload --repository pypi dist/*
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You will be prompted for your PyPI username and password. Use the
following values.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>username&lt;/th>
&lt;th>password&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>__token__&lt;/code>&lt;/td>
&lt;td>API token including the &lt;code>pypi-&lt;/code> prefix&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Alternatively you can also use a &lt;code>.pypirc&lt;/code> file to define your package
indexes config i.e. TestPyPI, PyPi. If you choose to go this route, create
a &lt;code>$HOME/.pypirc&lt;/code> file with the following contents:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">[pypi]
username=__token__
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can also use the &lt;code>password&lt;/code> field and paste in your API token but the
recommended way is to use &lt;code>keyring&lt;/code> (which is installed by Twine) for saving
credentials such as API tokens and passwords. You can do so with:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ keyring set https://upload.pypi.org/legacy/ &amp;lt;value_of_api_token&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>When the upload process finishes, you should be able to view your package
on PyPI at &lt;a href="https://pypi.org/project/your-package-name">https://pypi.org/project/your-package-name&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Installing and testing out your package&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ python3 -m pip install your-package
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once the installation has finished you can test it out by importing your
package.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ python3
&amp;gt;&amp;gt;&amp;gt; from example_package import your_function
&amp;gt;&amp;gt;&amp;gt; your_function.do_something&lt;span style="color:#f92672">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Congrats, you&amp;rsquo;ve successfully published your pacakge to PyPI. 🎉&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="bonus-automation-with-github-packages">
Bonus: Automation with GitHub Packages
&lt;a class="heading-link" href="#bonus-automation-with-github-packages">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>You&amp;rsquo;ll probably want to automate this process as part of your CI/CD pipeline.
Here&amp;rsquo;s how to set it up using GitHub Actions.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Create a &lt;a href="https://pypi.org/manage/account/#api-tokens">new PyPI API token&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Add the API token as a secret to your target GitHub repository. You can find
this under Settings &amp;gt; Secrets for your repo. Give the secret a name e.g.
&lt;code>PYPI_API_TOKEN&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Create a GitHub action workflow file in your repo at
&lt;code>.github/workflows/pypi-publish.yml&lt;/code> with the following contents:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Publish package to PyPI&lt;/span>
&lt;span style="color:#f92672">on&lt;/span>:
&lt;span style="color:#f92672">release&lt;/span>:
&lt;span style="color:#f92672">types&lt;/span>: [&lt;span style="color:#ae81ff">created]&lt;/span>
&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;span style="color:#f92672">build-n-publish&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Build and publish to PyPI&lt;/span>
&lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-18.04&lt;/span>
&lt;span style="color:#f92672">steps&lt;/span>:
- &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@master&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Set up Python 3.7&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/setup-python@v1&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">python-version&lt;/span>: &lt;span style="color:#ae81ff">3.7&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Install pypa/build&lt;/span>
&lt;span style="color:#f92672">run&lt;/span>: &amp;gt;-&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> python -m
&lt;/span>&lt;span style="color:#e6db74"> pip install
&lt;/span>&lt;span style="color:#e6db74"> build
&lt;/span>&lt;span style="color:#e6db74"> --user&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Build a binary wheel and a source tarball&lt;/span>
&lt;span style="color:#f92672">run&lt;/span>: &amp;gt;-&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> python -m
&lt;/span>&lt;span style="color:#e6db74"> build
&lt;/span>&lt;span style="color:#e6db74"> --sdist
&lt;/span>&lt;span style="color:#e6db74"> --wheel
&lt;/span>&lt;span style="color:#e6db74"> --outdir dist/
&lt;/span>&lt;span style="color:#e6db74"> .&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Publish package&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">pypa/gh-action-pypi-publish@release/v1&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">password&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.PYPI_API_TOKEN }}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This workflow will is triggered when a new release is created but you can
also configure it to be triggered when a different event happens e.g. when a
new tag gets pushed. Refer to the &lt;a href="https://docs.github.com/en/actions">GitHub Actions documentation&lt;/a>
for more configuration options.&lt;/p>
&lt;p>That&amp;rsquo;s it, time to get publishing.&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>blog.init()</title><link>https://jduabe.dev/posts/blog-init/</link><pubDate>Tue, 01 Jun 2021 21:42:31 +0800</pubDate><guid>https://jduabe.dev/posts/blog-init/</guid><description>&lt;p>This is a short write-up of how I got this blog up and running. There&amp;rsquo;s a lot of
options available out there &amp;ndash; from ready-to-go blogging platforms to building
your own site with a static site generator &amp;ndash; I went with the latter option
using &lt;a href="https://gohugo.io">Hugo&lt;/a> and hosting it on &lt;a href="https://pages.github.com">GitHub Pages&lt;/a>.&lt;/p>
&lt;p>Being able to just write stuff in Markdown and not having to worry about styles
and layouts (my design skills leave much to be desired) were the main reasons
for going this route, not to mention the services you can use to host your blog
for free.&lt;/p>
&lt;p>Time to get started.&lt;/p>
&lt;h2 id="acquiring-a-domain-name">
Acquiring a domain name
&lt;a class="heading-link" href="#acquiring-a-domain-name">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>Arguably the hardest and most time-consuming step, usually a lot of back and
forth going before you land on a domain name that you like and one that is
available.&lt;/p>
&lt;p>You&amp;rsquo;ll get one, eventually. 😄&lt;/p>
&lt;h2 id="setting-up-a-github-repo">
Setting up a GitHub repo
&lt;a class="heading-link" href="#setting-up-a-github-repo">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>The next step is setting up a GitHub repository that will house the content for
the site and will be hosted directly from said repo.&lt;/p>
&lt;p>To get started, create a &lt;a href="https://github.com/new">new repo on Github&lt;/a> with the
name &lt;em>username&lt;/em>.github.io, where &lt;em>username&lt;/em> is your GitHub username i.e.
&lt;em>j4ckofalltrades&lt;/em>.&lt;/p>
&lt;p>&lt;em>If the first part of the repository doesn’t exactly match your username,
it won’t work, so make sure to get it right.&lt;/em>&lt;/p>
&lt;h2 id="linking-your-custom-domain-to-github-pages">
Linking your custom domain to GitHub Pages
&lt;a class="heading-link" href="#linking-your-custom-domain-to-github-pages">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>The actual configuration will vary based on the domain name registrar that you
used &amp;ndash; the following instructions are specific to &lt;a href="https://namecheap.com">Namecheap&lt;/a>.&lt;/p>
&lt;p>Basically the following records need to be added to the custom domain:&lt;/p>
&lt;ul>
&lt;li>&lt;code>A&lt;/code> record for &lt;code>@&lt;/code> pointing to 185.199.108.153&lt;/li>
&lt;li>&lt;code>A&lt;/code> record for &lt;code>@&lt;/code> pointing to 185.199.109.153&lt;/li>
&lt;li>&lt;code>A&lt;/code> record for &lt;code>@&lt;/code> pointing to 185.199.110.153&lt;/li>
&lt;li>&lt;code>A&lt;/code> record for &lt;code>@&lt;/code> pointing to 185.199.111.153&lt;/li>
&lt;li>&lt;code>CNAME&lt;/code> record for &lt;code>www&lt;/code> pointing to your &lt;em>username&lt;/em>.github.io repo&lt;/li>
&lt;/ul>
&lt;p>The resulting config should look something like:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Type&lt;/th>
&lt;th>Host&lt;/th>
&lt;th>Value&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>A&lt;/td>
&lt;td>@&lt;/td>
&lt;td>185.199.108.153&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>A&lt;/td>
&lt;td>@&lt;/td>
&lt;td>185.199.109.153&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>A&lt;/td>
&lt;td>@&lt;/td>
&lt;td>185.199.110.153&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>A&lt;/td>
&lt;td>@&lt;/td>
&lt;td>185.199.111.153&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CNAME&lt;/td>
&lt;td>www&lt;/td>
&lt;td>&lt;em>username&lt;/em>.github.io&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;em>Normally, it takes around 30 minutes for newly-created records to take effect.&lt;/em>&lt;/p>
&lt;h2 id="setting-up-hugo">
Setting up Hugo
&lt;a class="heading-link" href="#setting-up-hugo">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Install Hugo&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e"># on Linux distros with snapd support&lt;/span>
$ snap install hugo
&lt;span style="color:#75715e"># on Debian or Ubuntu&lt;/span>
$ sudo apt-get install hugo
&lt;span style="color:#75715e"># on Mac (using Homebrew)&lt;/span>
$ brew install hugo
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Create new Hugo site and link to existing GitHub repo&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e"># replace username with your GitHub username&lt;/span>
$ hugo new site username.github.io
$ cd username.github.io
$ git init
$ git remote add &amp;lt;link_to_repo&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Adding a theme&lt;/p>
&lt;p>There are tons to choose from at &lt;a href="https://themes.gohugo.io/">Hugo Themes&lt;/a>,
this site uses &lt;a href="https://themes.gohugo.io/hugo-coder/">Coder&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e"># add theme as a submodule to the hugo website&lt;/span>
$ git submodule add https://github.com/luizdepra/hugo-coder.git themes/hugo-coder
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Update site configuration&lt;/p>
&lt;p>Update &lt;code>config.toml&lt;/code> using this &lt;a href="https://github.com/luizdepra/hugo-coder/wiki/Configurations#complete-example">sample config&lt;/a>
as a guide.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Add some content and run site locally&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e"># create first post&lt;/span>
$ hugo new posts/first-post.md
$ echo &lt;span style="color:#e6db74">&amp;#34;Hello World&amp;#34;&lt;/span> &amp;gt;&amp;gt; posts/hello-world.md
&lt;span style="color:#75715e"># run site locally&lt;/span>
$ hugo serve
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>The site should now be accessible at &lt;a href="http://localhost:1313/">http://localhost:1313/&lt;/a>.&lt;/p>
&lt;h2 id="setting-up-a-publishing-workflow-with-github-actions">
Setting up a publishing workflow with GitHub Actions
&lt;a class="heading-link" href="#setting-up-a-publishing-workflow-with-github-actions">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>Once everything looks good locally, the last step is to push the changes to the
repo and publish the generated content. To automate the publish step, I used the
&lt;a href="https://github.com/marketplace/actions/hugo-setup">Hugo Setup Action&lt;/a> and
&lt;a href="https://github.com/marketplace/actions/github-pages-action#github-actions-for-github-pages">GitHub Actions for GitHub Pages&lt;/a>
actions.&lt;/p>
&lt;p>Doing so is as simple as creating a &lt;code>.github/workflows/gh-pages.yml&lt;/code> file in
your repo with the following content:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">github pages&lt;/span>
&lt;span style="color:#f92672">on&lt;/span>:
&lt;span style="color:#f92672">push&lt;/span>:
&lt;span style="color:#f92672">branches&lt;/span>:
- &lt;span style="color:#ae81ff">main &lt;/span> &lt;span style="color:#75715e"># Set a branch to deploy&lt;/span>
&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;span style="color:#f92672">deploy&lt;/span>:
&lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-18.04&lt;/span>
&lt;span style="color:#f92672">steps&lt;/span>:
- &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v2&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">submodules&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span> &lt;span style="color:#75715e"># Fetch Hugo themes (true OR recursive)&lt;/span>
&lt;span style="color:#f92672">fetch-depth&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#75715e"># Fetch all history for .GitInfo and .Lastmod&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Setup Hugo&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-hugo@v2&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">hugo-version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;0.77.0&amp;#39;&lt;/span>
&lt;span style="color:#f92672">extended&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Build&lt;/span>
&lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">hugo --minify&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Deploy&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-gh-pages@v3&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">github_token&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.GITHUB_TOKEN }}&lt;/span>
&lt;span style="color:#f92672">publish_dir&lt;/span>: &lt;span style="color:#ae81ff">./public&lt;/span>
&lt;span style="color:#f92672">cname&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;custom_domain&amp;gt;&lt;/span> &lt;span style="color:#75715e"># your custom domain here&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After you push your changes make sure to set the Source branch under your
repo&amp;rsquo;s GitHub Pages settings to &lt;code>gh-pages&lt;/code> (default or to whatever you set as
the &lt;code>publish_branch&lt;/code> ) as this is where the generated content is published.&lt;/p>
&lt;p>&lt;em>Usually it takes a couple of hours for the DNS changes to propagate so don&amp;rsquo;t
worry if your site isn&amp;rsquo;t up yet. Just chill for a bit then press &lt;code>F5&lt;/code> like a
madman to see check if it has completed.&lt;/em>&lt;/p>
&lt;p>That&amp;rsquo;s all there is to it, time to get blogging.&lt;/p></description></item><item><title>Hacktoberfest 2020 Retrospective</title><link>https://jduabe.dev/posts/hacktoberfest-2020/</link><pubDate>Sat, 23 Jan 2021 12:50:21 +0800</pubDate><guid>https://jduabe.dev/posts/hacktoberfest-2020/</guid><description>&lt;figure>
&lt;img
src="https://res.cloudinary.com/j4ckofalltrades/image/upload/c_limit,w_500/v1611377061/blog/20210123/hacktoberfest_y899nk.jpg"
alt="hacktoberfest_shirt">
&lt;/figure>
&lt;p>This one&amp;rsquo;s long overdue and when the swag arrived last week I figured I really
need to get this done.&lt;/p>
&lt;p>The past year has been tough to say the least and getting to write code for
fun while helping out the open-source community was a very welcome distraction.&lt;/p>
&lt;p>Though I have been programming for a while this was my first time participating
in Hacktoberfest and contributing to open-source in general, it was nice to
get to talk to and interact with maintainers and other like-minded individuals
who are passionate about code and giving back to the community.&lt;/p>
&lt;p>Even with all the drama that surrounded this past year&amp;rsquo;s iteration I&amp;rsquo;d say this
was a positive experience overall, and I look forward to joining this year&amp;rsquo;s
iteration.&lt;/p>
&lt;p>Here are some of the projects I found interesting and contributed to (and still
try to contribute to):&lt;/p>
&lt;p>&lt;a href="https://github.com/trinodb/trino">&lt;img src="https://github-readme-stats.vercel.app/api/pin/?username=trinodb&amp;amp;repo=trino&amp;amp;theme=dark" alt="">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/strongbox/strongbox">&lt;img src="https://github-readme-stats.vercel.app/api/pin/?username=strongbox&amp;amp;repo=strongbox&amp;amp;theme=dark" alt="">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/oshi/oshi">&lt;img src="https://github-readme-stats.vercel.app/api/pin/?username=oshi&amp;amp;repo=oshi&amp;amp;theme=dark" alt="">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/jayehernandez/letra-extension">&lt;img src="https://github-readme-stats.vercel.app/api/pin/?username=jayehernandez&amp;amp;repo=letra-extension&amp;amp;theme=dark" alt="">&lt;/a>&lt;/p>
&lt;p>Happy hacking!&lt;/p></description></item><item><title>Hello World</title><link>https://jduabe.dev/posts/first-post/</link><pubDate>Sun, 01 Nov 2020 14:25:03 +0800</pubDate><guid>https://jduabe.dev/posts/first-post/</guid><description>&lt;p>Happy Halloween 🎃 🦇 👻&lt;/p>
&lt;p>Obligatory first post while getting everything set up; this website is powered
by &lt;a href="https://gohugo.io/">Hugo&lt;/a> with the &lt;a href="https://github.com/luizdepra/hugo-coder">hugo-coder theme&lt;/a>
and is hosted on &lt;a href="https://github.com/j4ckofalltrades.github.io">GitHub Pages&lt;/a>.&lt;/p>
&lt;p>More posts in the coming days (or weeks), stay tuned.&lt;/p></description></item></channel></rss>