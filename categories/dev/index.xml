<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dev on /home/j4ckofalltrades</title><link>https://jduabe.dev/categories/dev/</link><description>Recent content in dev on /home/j4ckofalltrades</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 12 Sep 2021 20:20:20 +0800</lastBuildDate><atom:link href="https://jduabe.dev/categories/dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Writing a custom Powerline plugin</title><link>https://jduabe.dev/posts/2021/powerline-plugin/</link><pubDate>Sun, 12 Sep 2021 20:20:20 +0800</pubDate><guid>https://jduabe.dev/posts/2021/powerline-plugin/</guid><description>&lt;p>&lt;a href="https://github.com/powerline/powerline">Powerline&lt;/a> is a tool I use as part of
my dev environment setup, and have my config backed up as part of my
&lt;a href="https://github.com/j4ckofalltrades/dotfiles">dotfiles&lt;/a>.&lt;/p>
&lt;p>It shows helpful information and context for stuff I&amp;rsquo;m working on, as well as
providing some eye-candy for my command line environment.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/j4ckofalltrades/dotfiles/master/env.png" alt="Env">&lt;/p>
&lt;p>While it comes with a lot of integrations out of the box i.e. &lt;code>bash&lt;/code>, &lt;code>zsh&lt;/code>,
&lt;code>tmux&lt;/code>, &lt;code>vim&lt;/code>, etc, it also provides a way for you to write your own &amp;ldquo;segments&amp;rdquo;.
This should serve as a quick guide for rolling your own custom Powerline
plugin.&lt;/p>
&lt;h2 id="basic-structure-and-configuration">
Basic structure and configuration
&lt;a class="heading-link" href="#basic-structure-and-configuration">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>Each powerline segment is a callable object. It is supposed to be either a
Python function or &lt;code>powerline.segments.Segment&lt;/code> class.&lt;/p>
&lt;p>I recently wrote my own custom one that displays the current Kubernetes
context and namespace, which uses a &lt;code>Segment&lt;/code> class. Here is a shortened version
which shows the basic structure.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">KubernetesSegment&lt;/span>(Segment):
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;Constructs the segment&amp;#39;s sections with the configured colorscheme and
&lt;/span>&lt;span style="color:#e6db74"> visibility options applied.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">@staticmethod&lt;/span>
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">kube_ctx_info&lt;/span>(pl):
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;Resolves the current active Kubernetes context (and namespace)
&lt;/span>&lt;span style="color:#e6db74"> from `$KUBECONFIG`.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">try&lt;/span>:
current_context &lt;span style="color:#f92672">=&lt;/span> config&lt;span style="color:#f92672">.&lt;/span>list_kube_config_contexts()[&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;span style="color:#66d9ef">return&lt;/span> current_context[&lt;span style="color:#e6db74">&amp;#39;name&amp;#39;&lt;/span>] &lt;span style="color:#f92672">or&lt;/span> &lt;span style="color:#e6db74">&amp;#39;N/A&amp;#39;&lt;/span>, \
current_context[&lt;span style="color:#e6db74">&amp;#39;context&amp;#39;&lt;/span>][&lt;span style="color:#e6db74">&amp;#39;namespace&amp;#39;&lt;/span>] &lt;span style="color:#f92672">or&lt;/span> &lt;span style="color:#e6db74">&amp;#39;default&amp;#39;&lt;/span>
&lt;span style="color:#66d9ef">except&lt;/span> &lt;span style="color:#a6e22e">Exception&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> e:
pl&lt;span style="color:#f92672">.&lt;/span>error(e)
&lt;span style="color:#66d9ef">def&lt;/span> __call__(self, pl):
pl&lt;span style="color:#f92672">.&lt;/span>debug(&lt;span style="color:#e6db74">&amp;#39;Running powerline-k8s...&amp;#39;&lt;/span>)
sections &lt;span style="color:#f92672">=&lt;/span> []
&lt;span style="color:#75715e"># additional logic to determine segment contents&lt;/span>
sections&lt;span style="color:#f92672">.&lt;/span>append({
&lt;span style="color:#e6db74">&amp;#39;contents&amp;#39;&lt;/span>: f&lt;span style="color:#e6db74">&amp;#39;u&amp;#39;&lt;/span>\U00002638&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;highlight_groups&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;k8s&amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;divider_highlight_group&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;k8s:divider&amp;#39;&lt;/span>,
})
&lt;span style="color:#66d9ef">return&lt;/span> sections
k8s &lt;span style="color:#f92672">=&lt;/span> with_docstring(KubernetesSegment(),
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;Return the current Kubernetes context and namespace.
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74">It will show the current context and namespace from `$KUBECONFIG`.
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74">Divider highlight group used: ``k8s:divider``.
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74">Highlight groups used: ``k8s``, ``k8s_context``, ``k8s_namespace``.
&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span>)
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;Custom segment entry point.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Make sure to add the &lt;a href="https://pypi.org/project/powerline-status">powerline-status&lt;/a>
package as a dependency.&lt;/em>&lt;/p>
&lt;p>Basically the class contains a function that returns a &lt;a href="https://powerline.readthedocs.io/en/latest/develop/segments.html#segment-dictionary">Segment dictionary&lt;/a>
which tells &lt;code>Powerline&lt;/code> what to display. In this particular example, the
following keys were used:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>contents&lt;/code>: Actual segment contents, excluding dividers and before/after.
May be &lt;code>None&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>highlight_groups&lt;/code>, &lt;code>divider_highlight_group&lt;/code>: Used highlight groups.
May be &lt;code>None&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Highlight groups determine the &amp;lsquo;style&amp;rsquo; that is used for a particular segment
e.g. background and foreground, divider color to clearly distinguish one segment
from another.&lt;/p>
&lt;p>The colors that are available to you will depend on the current colorscheme that
you are using. In general you&amp;rsquo;ll need to add the &amp;ldquo;groups&amp;rdquo; definition to the
colorscheme config file, which in this case was
&lt;code>&amp;lt;powerline_dir&amp;gt;/colorschemes/solarized.json&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;k8s&amp;#34;&lt;/span>: { &lt;span style="color:#f92672">&amp;#34;fg&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;solarized:blue&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;#34;bg&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;solarized:base02&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;#34;attrs&amp;#34;&lt;/span>: [] },
&lt;span style="color:#f92672">&amp;#34;k8s:divider&amp;#34;&lt;/span>: { &lt;span style="color:#f92672">&amp;#34;fg&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;gray4&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;#34;bg&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;solarized:base02&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;#34;attrs&amp;#34;&lt;/span>: [] }
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Check out the Powerline docs for a more detailed view into
&lt;a href="https://powerline.readthedocs.io/en/latest/configuration.html">configuration and customization&lt;/a>.&lt;/p>
&lt;p>The next step is to let Powerline know of the new segment by adding it to the
segment&amp;rsquo;s config file. To add the new segment to the current shell prompt, add
the following entry to the &lt;code>&amp;lt;powerline_dir&amp;gt;/themes/shell/default.json&lt;/code> config
file.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;function&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;k8s&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;priority&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">30&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="installation">
Installation
&lt;a class="heading-link" href="#installation">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>Once all configuration has been done it&amp;rsquo;s time to &amp;ldquo;install&amp;rdquo; the segment and try
it out, you can do so by executing:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">python3 &lt;span style="color:#f92672">-&lt;/span>m pip install &lt;span style="color:#f92672">--&lt;/span>editable &lt;span style="color:#f92672">.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Installing the package in editable mode saves you from having to &amp;ldquo;re-install&amp;rdquo;
to see the latest changes. If everything went well you should be able to see
your new segment.&lt;/p>
&lt;p>&lt;img src="https://res.cloudinary.com/j4ckofalltrades/image/upload/v1623588713/foss/powerline-k8s_uc0cxj.png" alt="powerline-k8s">&lt;/p>
&lt;h2 id="troubleshooting">
Troubleshooting
&lt;a class="heading-link" href="#troubleshooting">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>Having issues with your plugin, try out the following:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Run &lt;code>powerline-lint&lt;/code> to check for errors in the configuration files i.e.
colorscheme and/or segment config.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Restart powerline by running &lt;code>powerline-daemon --replace&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Configure logging with &lt;a href="https://powerline.readthedocs.io/en/master/develop/segments.html#powerlinelogger-class">PowerlineLogger&lt;/a>
and &lt;a href="https://powerline.readthedocs.io/en/master/configuration/reference.html#config-common-log">where you want the logs to be written&lt;/a>
for easier debugging.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>It is also worth checking out the &lt;a href="https://powerline.readthedocs.io/en/master/troubleshooting.html">Powerline docs&lt;/a> for other
common issues that you may encounter.&lt;/p>
&lt;h2 id="misc">
Misc
&lt;a class="heading-link" href="#misc">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Check out the full source on GitHub for the &lt;a href="https://github.com/j4ckofalltrades/powerline-k8s">powerline-k8s&lt;/a> plugin.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If you want to share your custom Powerline segment, you might want to check
out this guide about &lt;a href="https://jduabe.dev/posts/pypi-publish/">publishing packages to PyPI&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Publishing to Maven Central</title><link>https://jduabe.dev/posts/2021/mvn-central-publish/</link><pubDate>Sun, 25 Jul 2021 15:38:23 +0800</pubDate><guid>https://jduabe.dev/posts/2021/mvn-central-publish/</guid><description>&lt;p>&lt;img src="https://res.cloudinary.com/j4ckofalltrades/image/upload/w_1000/v1633760759/blog/publish-guides/mvn-publish_jfglsn.png" alt="mvn">&lt;/p>
&lt;p>This guide walks you through the necessary steps to upload your package to the
&lt;a href="https://repo.maven.apache.org/maven2">Maven Central&lt;/a> repository (and optionally
to GitHub Packages registry) with some recommendations along the way.&lt;/p>
&lt;h2 id="setup-ossrh-repository">
Setup OSSRH Repository
&lt;a class="heading-link" href="#setup-ossrh-repository">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Sign up for a &lt;a href="https://issues.sonatype.org/secure/Signup!default.jspa">new account&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Create a &lt;a href="https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&amp;amp;pid=10134">new project ticket&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Claim your namespace by setting the &lt;code>groupId&lt;/code> for your artifact&lt;/p>
&lt;p>If you&amp;rsquo;re using a free code hosting service like GitHub or Bitbucket:&lt;/p>
&lt;p>&lt;code>groupId: io.github.j4ckofalltrades&lt;/code>&lt;/p>
&lt;p>Alternatively if you want to use a custom domain, the group id should:&lt;/p>
&lt;p>&lt;code>groupId: com.your-custom-domain&lt;/code>&lt;/p>
&lt;p>You will also need to prove ownership of the public repository or the custom
domain. For the former you will be asked to create an empty repository using
the ticket number for your created OSSRH ticket e.g. &lt;code>OSSRH-73148&lt;/code>; for the
latter you&amp;rsquo;ll need to add a &lt;code>TXT&lt;/code> record linked to the OSSRH ticket that was
created to register your &lt;code>groupId&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="configure-gpgpgp-key">
Configure GPG/PGP key
&lt;a class="heading-link" href="#configure-gpgpgp-key">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>This will be used for signing your artifacts, at it is a requirement for
publishing them to the Central Repository.&lt;/p>
&lt;p>You&amp;rsquo;ll need to generate a key pair and distribute it to a known key server
(so that others can validate it).&lt;/p>
&lt;p>The following examples show how to do this with &lt;a href="https://gnupg.org">GPG&lt;/a>; you
can &lt;a href="https://gnupg.org">download&lt;/a> or install it using your package manager if
it is not already available in your machine.&lt;/p>
&lt;p>To generate a key pair, run:&lt;/p>
&lt;p>&lt;code>$ gpg --gen-key&lt;/code>&lt;/p>
&lt;p>Fill in the details you are prompted for e.g. name, email, time of validity, and
passphrase for the generated key. &lt;strong>This passphrase and your private key are all
that is needed to sign artifacts with your signature.&lt;/strong>&lt;/p>
&lt;p>Once the key pair is generated, you&amp;rsquo;ll need to distribute your public key to a
known key server i.e. &lt;code>keyserver.ubuntu.com&lt;/code>. In order to do so, run the
following commands:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e"># list gpg keys&lt;/span>
$ gpg --list-keys
&lt;span style="color:#75715e"># the line starting with **pub** shows your public key details&lt;/span>
&lt;span style="color:#75715e"># copy the keyid and run the following command&lt;/span>
$ gpg --keyserver keyserver.ubuntu.com --send-keys &amp;lt;your_key_here&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To check that your key was successfully uploaded, you can search for it at
&lt;a href="https://keyserver.ubuntu.com">https://keyserver.ubuntu.com&lt;/a> using your public key (and prepending &amp;lsquo;0x&amp;rsquo; to it).&lt;/p>
&lt;p>Other supported key servers are &lt;code>keys.openpgp.org&lt;/code>, and &lt;code>pgp.mit.edu&lt;/code>.&lt;/p>
&lt;h2 id="configure-build-script">
Configure build script
&lt;a class="heading-link" href="#configure-build-script">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>In order to publish your artifact to the Central Repository, it will need to
meet the following requirements:&lt;/p>
&lt;ul>
&lt;li>Project coordinates&lt;/li>
&lt;li>Javadoc and sources jar&lt;/li>
&lt;li>POM metadata (includes project name and description, url, SCM info, license)&lt;/li>
&lt;li>Sign artifacts with GPG/PGP&lt;/li>
&lt;/ul>
&lt;p>The configuration will vary slightly depending on the build tool you are using,
below is an abridged sample configuration &lt;code>build.gradle.kts&lt;/code> file (Kotlin DSL)
used with &lt;code>gradle&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="color:#75715e">// build.gradle.kts
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">// project coordinates
&lt;/span>&lt;span style="color:#75715e">&lt;/span>group = &lt;span style="color:#e6db74">&amp;#34;io.github.j4ckofalltrades&amp;#34;&lt;/span>
version = &lt;span style="color:#e6db74">&amp;#34;1.0.0&amp;#34;&lt;/span>
&lt;span style="color:#75715e">// generate KDoc and Javadoc using Dokka
&lt;/span>&lt;span style="color:#75715e">&lt;/span>tasks.withType&amp;lt;DokkaTask&amp;gt;().configureEach {
dokkaSourceSets {
named(&lt;span style="color:#e6db74">&amp;#34;main&amp;#34;&lt;/span>) {
outputDirectory.&lt;span style="color:#66d9ef">set&lt;/span>(&lt;span style="color:#66d9ef">file&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;docs&amp;#34;&lt;/span>))
moduleName.&lt;span style="color:#66d9ef">set&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;steam-webapi&amp;#34;&lt;/span>)
includes.from(&lt;span style="color:#e6db74">&amp;#34;Module.md&amp;#34;&lt;/span>)
displayName.&lt;span style="color:#66d9ef">set&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;JVM&amp;#34;&lt;/span>)
platform.&lt;span style="color:#66d9ef">set&lt;/span>(org.jetbrains.dokka.Platform.jvm)
sourceLink {
localDirectory.&lt;span style="color:#66d9ef">set&lt;/span>(&lt;span style="color:#66d9ef">file&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;src/main/kotlin&amp;#34;&lt;/span>))
remoteUrl.&lt;span style="color:#66d9ef">set&lt;/span>(
URL(
&lt;span style="color:#e6db74">&amp;#34;https://github.com/j4ckofalltrades/steam-webapi-kt&amp;#34;&lt;/span> +
&lt;span style="color:#e6db74">&amp;#34;/tree/main/lib/src/main/kotlin&amp;#34;&lt;/span>
)
)
remoteLineSuffix.&lt;span style="color:#66d9ef">set&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;#L&amp;#34;&lt;/span>)
}
}
}
}
&lt;span style="color:#75715e">// javadoc and sources jar
&lt;/span>&lt;span style="color:#75715e">&lt;/span>tasks {
&lt;span style="color:#66d9ef">val&lt;/span> sourcesJar &lt;span style="color:#66d9ef">by&lt;/span> registering(Jar&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span>) {
dependsOn(JavaPlugin.CLASSES_TASK_NAME)
archiveClassifier.&lt;span style="color:#66d9ef">set&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;sources&amp;#34;&lt;/span>)
archiveBaseName.&lt;span style="color:#66d9ef">set&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;steam-webapi-kt&amp;#34;&lt;/span>)
from(sourceSets[&lt;span style="color:#e6db74">&amp;#34;main&amp;#34;&lt;/span>].allSource)
}
&lt;span style="color:#66d9ef">val&lt;/span> javadocJar &lt;span style="color:#66d9ef">by&lt;/span> registering(Jar&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span>) {
dependsOn(&lt;span style="color:#e6db74">&amp;#34;dokkaJavadoc&amp;#34;&lt;/span>)
archiveClassifier.&lt;span style="color:#66d9ef">set&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;javadoc&amp;#34;&lt;/span>)
archiveBaseName.&lt;span style="color:#66d9ef">set&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;steam-webapi-kt&amp;#34;&lt;/span>)
from(&lt;span style="color:#e6db74">&amp;#34;docs&amp;#34;&lt;/span>)
}
artifacts {
archives(sourcesJar)
archives(javadocJar)
archives(jar)
}
}
publishing {
publications {
create&amp;lt;MavenPublication&amp;gt;(&lt;span style="color:#e6db74">&amp;#34;mavenJava&amp;#34;&lt;/span>) {
groupId = project.group.toString()
artifactId = rootProject.name
version = project.version.toString()
from(components[&lt;span style="color:#e6db74">&amp;#34;java&amp;#34;&lt;/span>])
artifact(tasks[&lt;span style="color:#e6db74">&amp;#34;sourcesJar&amp;#34;&lt;/span>])
artifact(tasks[&lt;span style="color:#e6db74">&amp;#34;javadocJar&amp;#34;&lt;/span>])
&lt;span style="color:#75715e">// POM metadata
&lt;/span>&lt;span style="color:#75715e">&lt;/span> pom {
name.&lt;span style="color:#66d9ef">set&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;steam-webapi-kt&amp;#34;&lt;/span>)
description.&lt;span style="color:#66d9ef">set&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Steam WebAPI wrapper in Kotlin and Ktor&amp;#34;&lt;/span>)
url.&lt;span style="color:#66d9ef">set&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;https://github.com/j4ckofalltrades/steam-webapi-kt&amp;#34;&lt;/span>)
licenses {
license {
name.&lt;span style="color:#66d9ef">set&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;MIT&amp;#34;&lt;/span>)
url.&lt;span style="color:#66d9ef">set&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;https://opensource.org/licenses/MIT&amp;#34;&lt;/span>)
}
}
developers {
developer {
id.&lt;span style="color:#66d9ef">set&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;j4ckofalltrades&amp;#34;&lt;/span>)
name.&lt;span style="color:#66d9ef">set&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Jordan Duabe&amp;#34;&lt;/span>)
email.&lt;span style="color:#66d9ef">set&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;me@jduabe.dev&amp;#34;&lt;/span>)
}
}
scm {
connection.&lt;span style="color:#66d9ef">set&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;scm:git:git://github.com/j4ckofalltrades/steam-webapi-kt.git&amp;#34;&lt;/span>)
developerConnection.&lt;span style="color:#66d9ef">set&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;scm:git:ssh://github.com/j4ckofalltrades/steam-webapi-kt.git&amp;#34;&lt;/span>)
url.&lt;span style="color:#66d9ef">set&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;https://github.com/j4ckofalltrades/steam-webapi-kt&amp;#34;&lt;/span>)
}
}
}
}
repositories {
&lt;span style="color:#75715e">// Maven Central
&lt;/span>&lt;span style="color:#75715e">&lt;/span> maven {
name = &lt;span style="color:#e6db74">&amp;#34;OSSRH&amp;#34;&lt;/span>
url = uri(&lt;span style="color:#e6db74">&amp;#34;https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/&amp;#34;&lt;/span>)
credentials {
username = System.getenv(&lt;span style="color:#e6db74">&amp;#34;OSSRH_USERNAME&amp;#34;&lt;/span>)
password = System.getenv(&lt;span style="color:#e6db74">&amp;#34;OSSRH_PASSWORD&amp;#34;&lt;/span>)
}
}
&lt;span style="color:#75715e">// GitHub Packages
&lt;/span>&lt;span style="color:#75715e">&lt;/span> maven {
name = &lt;span style="color:#e6db74">&amp;#34;GitHubPackages&amp;#34;&lt;/span>
url = uri(&lt;span style="color:#e6db74">&amp;#34;https://maven.pkg.github.com/j4ckofalltrades/steam-webapi-kt&amp;#34;&lt;/span>)
credentials {
username = System.getenv(&lt;span style="color:#e6db74">&amp;#34;GITHUB_ACTOR&amp;#34;&lt;/span>)
password = System.getenv(&lt;span style="color:#e6db74">&amp;#34;GITHUB_TOKEN&amp;#34;&lt;/span>)
}
}
}
}
&lt;span style="color:#75715e">// sign artifact
&lt;/span>&lt;span style="color:#75715e">&lt;/span>signing {
setRequired({
gradle.taskGraph.hasTask(&lt;span style="color:#e6db74">&amp;#34;publishMavenJavaToOSSRHRepository&amp;#34;&lt;/span>)
})
&lt;span style="color:#66d9ef">val&lt;/span> signingKey = System.getenv(&lt;span style="color:#e6db74">&amp;#34;SIGNING_KEY&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">val&lt;/span> signingPassword = System.getenv(&lt;span style="color:#e6db74">&amp;#34;SIGNING_PASSWORD&amp;#34;&lt;/span>)
useInMemoryPgpKeys(signingKey, signingPassword)
sign(publishing.publications[&lt;span style="color:#e6db74">&amp;#34;mavenJava&amp;#34;&lt;/span>])
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="publishing-artifacts">
Publishing artifacts
&lt;a class="heading-link" href="#publishing-artifacts">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>The configuration above uses the &lt;a href="https://docs.gradle.org/current/userguide/signing_plugin.html#sec:in-memory-keys%5D">in-memory ascii-armored keys&lt;/a>
approach for signing artifacts. Check out the docs for the &lt;a href="https://docs.gradle.org/current/userguide/signing_plugin.html">Gradle Signing
Plugin&lt;/a> to find
out what best suits your use case.&lt;/p>
&lt;p>Once everything is configured, publishing the articats is as simple as running:&lt;/p>
&lt;p>&lt;code>$ gradle publish&lt;/code>&lt;/p>
&lt;p>Note that this will publish your artifacts to &lt;strong>all&lt;/strong> target repositories, in
order to publish to a specific repository you need to specify the repo &lt;em>name&lt;/em>.
Using the above configuration as an example:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e"># publish to Maven Central&lt;/span>
$ gradle publishMavenJavaPublicationToOSSRHRepository
&lt;span style="color:#75715e"># publish to GitHub Packages&lt;/span>
$ gradle publishMavenJavaPublicationToGitHubPackagesToRepository
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="releasing-artifacts">
Releasing artifacts
&lt;a class="heading-link" href="#releasing-artifacts">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>Login to the &lt;a href="https://s01.oss.sonatype.org/#stagingRepositories">Nexus staging repository&lt;/a>,
where you should be able to see your &lt;code>groupId&lt;/code> listed. In order to &lt;em>sync&lt;/em> the
artifacts to the Central Repository you&amp;rsquo;ll need to click on the &lt;code>Close&lt;/code> button
which will close said staging repository.&lt;/p>
&lt;p>The close operation will run a series of checks to ensure that the uploaded
artifacts meet the &lt;a href="#configure-build-script">requirements&lt;/a>.&lt;/p>
&lt;p>If the release was successful, you should be able to see your artifacts in the
Central Repository at &lt;a href="https://repo1.maven.org/maven2/">https://repo1.maven.org/maven2/&lt;/a> typically within ~30
minutes. Updates to &lt;a href="https://search.maven.org">https://search.maven.org&lt;/a> can take up to a couple of hours.&lt;/p>
&lt;h2 id="optional-automation-with-github-packages">
(Optional) Automation with GitHub Packages
&lt;a class="heading-link" href="#optional-automation-with-github-packages">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>You&amp;rsquo;ll probably want to automate this process as part of your CI/CD pipeline.
Here&amp;rsquo;s how to set it up using GitHub Actions.&lt;/p>
&lt;p>You&amp;rsquo;ll need to add your OSSRH credentials, and signing key details as secrets
to your repository, you can find this under Settings &amp;gt; Secrets.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Publish to OSSRH and GitHub Package Registry&lt;/span>
&lt;span style="color:#f92672">on&lt;/span>:
&lt;span style="color:#f92672">release&lt;/span>:
&lt;span style="color:#f92672">types&lt;/span>: [&lt;span style="color:#ae81ff">created]&lt;/span>
&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;span style="color:#f92672">publish&lt;/span>:
&lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;span style="color:#f92672">steps&lt;/span>:
- &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v2&lt;/span>
- &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/setup-java@v2&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">distribution&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;adopt-openj9&amp;#39;&lt;/span>
&lt;span style="color:#f92672">java-version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;11&amp;#39;&lt;/span>
- &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">./gradlew publish&lt;/span>
&lt;span style="color:#f92672">env&lt;/span>:
&lt;span style="color:#f92672">GITHUB_ACTOR&lt;/span>: &lt;span style="color:#ae81ff">${{ github.actor }}&lt;/span>
&lt;span style="color:#f92672">GITHUB_TOKEN&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.GITHUB_TOKEN }}&lt;/span>
&lt;span style="color:#f92672">OSSRH_USERNAME&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.OSSRH_USERNAME }}&lt;/span>
&lt;span style="color:#f92672">OSSRH_PASSWORD&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.OSSRH_PASSWORD }}&lt;/span>
&lt;span style="color:#f92672">SIGNING_KEY&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.SIGNING_KEY }}&lt;/span>
&lt;span style="color:#f92672">SIGNING_PASSWORD&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.SIGNING_PASSWORD }}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The configuration samples used here can also be checked out in full at this &lt;a href="https://github.com/j4ckofalltrades/steam-webapi-kt">GitHub
repository&lt;/a>.&lt;/p>
&lt;p>That&amp;rsquo;s it, time to get publishing.&lt;/p></description></item><item><title>Publishing to the npm registry</title><link>https://jduabe.dev/posts/2021/npm-publish/</link><pubDate>Sat, 19 Jun 2021 13:43:02 +0800</pubDate><guid>https://jduabe.dev/posts/2021/npm-publish/</guid><description>&lt;p>&lt;img src="https://res.cloudinary.com/j4ckofalltrades/image/upload/w_1000/v1633760759/blog/publish-guides/npm-publish_ssmdeh.png" alt="npm">&lt;/p>
&lt;p>This guide walks you through the necessary steps to upload your package to the
&lt;a href="https://npmjs.com">npm registry&lt;/a> with some recommendations along the way.&lt;/p>
&lt;h2 id="setup-npm-account">
Setup npm account
&lt;a class="heading-link" href="#setup-npm-account">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Register for an &lt;a href="https://npmjs.com/signup">npm account&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Test your account by logging in using &lt;code>npm&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e"># you should be prompted for your username, password, and email address&lt;/span>
&lt;span style="color:#75715e"># and an OTP if you&amp;#39;ve enabled 2FA&lt;/span>
$ npm login
&lt;span style="color:#75715e"># this should print out your npm username&lt;/span>
$ npm whoami
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="dry-run-testing-your-package-locally">
Dry-run (Testing your package locally)
&lt;a class="heading-link" href="#dry-run-testing-your-package-locally">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>Test out your package locally to ensure that everything works before publihsing
it to the npm registry. You can do this by invoking &lt;code>npm install&lt;/code> and providing
the path to your package e.g.:&lt;/p>
&lt;p>&lt;code>$ npm install /path/to/your/package&lt;/code>&lt;/p>
&lt;p>Another thing to do is to review the contents of the published package to make
sure that it doesn&amp;rsquo;t include any sensitive or unnecessary information. You can
perform a &lt;code>dry-run&lt;/code> with:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ npm publish --dry-run
&lt;span style="color:#75715e"># output should look something like&lt;/span>
npm notice
npm notice &amp;lt;package_name@version&amp;gt;
npm notice &lt;span style="color:#f92672">===&lt;/span> Tarball Contents &lt;span style="color:#f92672">===&lt;/span>
npm notice &amp;lt;tarball_contents_here&amp;gt;
npm notice &lt;span style="color:#f92672">===&lt;/span> Tarball Details &lt;span style="color:#f92672">===&lt;/span>
npm notice &amp;lt;tarball_details_here&amp;gt;
npm notice
+ &amp;lt;package_name@version&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Additionally you can create a &lt;code>.npmignore&lt;/code> file to exclude files that you don&amp;rsquo;t
want to publish to the registry.&lt;/p>
&lt;h2 id="publishing-to-the-npm-registry">
Publishing to the npm registry
&lt;a class="heading-link" href="#publishing-to-the-npm-registry">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>In your package&amp;rsquo;s root directory, execute:&lt;/p>
&lt;p>&lt;code>$ npm publish&lt;/code>&lt;/p>
&lt;p>If publishing a scoped public package, execute:&lt;/p>
&lt;p>&lt;code>$ npm publish --access public&lt;/code>&lt;/p>
&lt;p>When the publish process finishes, you should be able to see your public
package page at npmjs.com/package/your-package-name.&lt;/p>
&lt;p>Congrats, you&amp;rsquo;ve successfully published your package to the npm registry. 🎉&lt;/p>
&lt;h2 id="bonus-automation-with-github-packages">
Bonus: Automation with GitHub Packages
&lt;a class="heading-link" href="#bonus-automation-with-github-packages">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>You&amp;rsquo;ll probably want to automate this process as part of your CI/CD pipeline.
Here&amp;rsquo;s how to set it up using GitHub Actions.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Create a &lt;a href="https://docs.npmjs.com/creating-and-viewing-access-tokens">new npm access token&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Add the access token as a secret to your target GitHub repository. You can
find this under Settings &amp;gt; Secrets for your repo. Give the secret a name e.g.
&lt;code>NPM_TOKEN&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Create a GitHub action workflow file in your repo at
&lt;code>.github/workflows/npm-publish.yml&lt;/code> with the following contents:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Publish package to npm&lt;/span>
&lt;span style="color:#f92672">on&lt;/span>:
&lt;span style="color:#f92672">release&lt;/span>:
&lt;span style="color:#f92672">types&lt;/span>: [&lt;span style="color:#ae81ff">created]&lt;/span>
&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;span style="color:#f92672">build&lt;/span>:
&lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;span style="color:#f92672">permissions&lt;/span>:
&lt;span style="color:#f92672">contents&lt;/span>: &lt;span style="color:#ae81ff">read&lt;/span>
&lt;span style="color:#f92672">packages&lt;/span>: &lt;span style="color:#ae81ff">write&lt;/span>
&lt;span style="color:#f92672">steps&lt;/span>:
- &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v2&lt;/span>
- &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/setup-node@v1&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">node-version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;14.x&amp;#39;&lt;/span>
&lt;span style="color:#f92672">registry-url&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;https://registry.npmjs.org&amp;#39;&lt;/span>
- &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">npm install&lt;/span>
- &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">npm test&lt;/span>
- &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">npm run build&lt;/span>
&lt;span style="color:#75715e"># Publish to npm (append `--access public` for scoped packages)&lt;/span>
- &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">npm publish&lt;/span>
&lt;span style="color:#f92672">env&lt;/span>:
&lt;span style="color:#f92672">NODE_AUTH_TOKEN&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.NPM_TOKEN }}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This workflow is triggered when a new release is created but you can also
configure it to be triggered when a different event happens e.g. when a
new tag gets pushed. Refer to the &lt;a href="https://docs.github.com/en/actions">GitHub Actions documentation&lt;/a>
for more configuration options.&lt;/p>
&lt;p>That&amp;rsquo;s it, time to get publishing.&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Publishing to PyPI</title><link>https://jduabe.dev/posts/2021/pypi-publish/</link><pubDate>Sun, 13 Jun 2021 22:08:53 +0800</pubDate><guid>https://jduabe.dev/posts/2021/pypi-publish/</guid><description>&lt;p>&lt;img src="https://res.cloudinary.com/j4ckofalltrades/image/upload/w_1000,ar_16:9,c_fill,g_auto,e_sharpen/v1633760759/blog/publish-guides/powerline-k8s_lfxh1c.png" alt="pypi">&lt;/p>
&lt;p>This guide walks you through the necessary steps to upload your package to the
🐍 Python Package Index (PyPI) with some recommendations along the way.&lt;/p>
&lt;h2 id="dry-run-publishing-to-testpypi">
Dry-run (Publishing to TestPyPI)
&lt;a class="heading-link" href="#dry-run-publishing-to-testpypi">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>&lt;em>This step is optional but recommended.&lt;/em>&lt;/p>
&lt;p>&lt;a href="https://test.pypi.org">TestPyPI&lt;/a> is a separate instance of the &lt;em>real&lt;/em> package
index which is intended for testing and experimentation. This is a good way to
test out your package before uploading to the real index.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Register an account for &lt;a href="https://test.pypi.org/account/register">TestPyPI&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Create a &lt;a href="https://test.pypi.org/manage/account/#api-tokens">TestPyPI API token&lt;/a>
&amp;ndash; make sure to set the scope to &amp;ldquo;Entire account&amp;rdquo;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;a href="https://packaging.python.org/key_projects/#twine">twine&lt;/a> to upload your
package&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ python3 -m pip install --upgrade twine
&lt;span style="color:#75715e"># replace dist with the directory where your distribution archive is located&lt;/span>
$ python3 -m twine upload --repository testpypi dist/*
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You will be prompted for your TestPyPI username and password. Use the
following values.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>username&lt;/th>
&lt;th>password&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>__token__&lt;/code>&lt;/td>
&lt;td>API token including the &lt;code>pypi-&lt;/code> prefix&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Alternatively you can also use a &lt;code>.pypirc&lt;/code> file to define your package
indexes config i.e. TestPyPI, PyPi. If you choose to go this route, create
a &lt;code>$HOME/.pypirc&lt;/code> file with the following contents:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#f92672">[&lt;/span>testpypi&lt;span style="color:#f92672">]&lt;/span>
username&lt;span style="color:#f92672">=&lt;/span>__token__
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can also use the &lt;code>password&lt;/code> field and paste in your API token but the
recommended way is to use &lt;code>keyring&lt;/code> (which is installed by Twine) for saving
credentials such as API tokens and passwords. You can do so with:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">keyring set https://test.pypi.org/legacy/ &amp;lt;value_of_api_token&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once the upload process has finished, you should be able to view your
package on TestPyPI at &lt;a href="https://test.pypi.org/project/your-package-name">https://test.pypi.org/project/your-package-name&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Installing and testing out your package&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ python3 -m pip install &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span>--index-url https://test.pypi.org/simple/ --no-deps your-package
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that the &lt;code>no-deps&lt;/code> flag is specified as one or more of your package&amp;rsquo;s
dependencies might not be present in TestPyPI and may cause the installation
to fail.&lt;/p>
&lt;p>Once the installation has finished you can test it out by importing your
package.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ python3
&amp;gt;&amp;gt;&amp;gt; from example_package import your_function
&amp;gt;&amp;gt;&amp;gt; your_function.do_something&lt;span style="color:#f92672">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that the import package will always be &lt;code>example_package&lt;/code> regardless of
the &lt;code>name&lt;/code> you&amp;rsquo;ve configured for your package.&lt;/p>
&lt;p>That&amp;rsquo;s it, you can now try and upload your package to the &lt;em>real&lt;/em> index.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="publishing-to-pypi">
Publishing to PyPI
&lt;a class="heading-link" href="#publishing-to-pypi">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>The &lt;a href="#dry-run-publishing-to-testpypi">steps&lt;/a> are identical with how you would
upload a package to TestPyPI. The main difference is that you&amp;rsquo;ll have to
register an account and create an API token at &lt;a href="https://pypi.org">PyPI&lt;/a>, as the
former is a separate instance of PyPI.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Register an account for &lt;a href="https://pypi.org/account/register">PyPI&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Create a &lt;a href="https://pypi.org/manage/account/#api-tokens">PyPI API token&lt;/a>
&amp;ndash; make sure to set the scope to &amp;ldquo;Entire account&amp;rdquo;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;a href="https://packaging.python.org/key_projects/#twine">twine&lt;/a> to upload your
package&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ python3 -m pip install --upgrade twine
&lt;span style="color:#75715e"># replace dist with the directory where your distribution archive is located&lt;/span>
$ python3 -m twine upload --repository pypi dist/*
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You will be prompted for your PyPI username and password. Use the
following values.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>username&lt;/th>
&lt;th>password&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>__token__&lt;/code>&lt;/td>
&lt;td>API token including the &lt;code>pypi-&lt;/code> prefix&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Alternatively you can also use a &lt;code>.pypirc&lt;/code> file to define your package
indexes config i.e. TestPyPI, PyPi. If you choose to go this route, create
a &lt;code>$HOME/.pypirc&lt;/code> file with the following contents:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#f92672">[&lt;/span>pypi&lt;span style="color:#f92672">]&lt;/span>
username&lt;span style="color:#f92672">=&lt;/span>__token__
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can also use the &lt;code>password&lt;/code> field and paste in your API token but the
recommended way is to use &lt;code>keyring&lt;/code> (which is installed by Twine) for saving
credentials such as API tokens and passwords. You can do so with:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">keyring set https://upload.pypi.org/legacy/ &amp;lt;value_of_api_token&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>When the upload process finishes, you should be able to view your package
on PyPI at &lt;a href="https://pypi.org/project/your-package-name">https://pypi.org/project/your-package-name&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Installing and testing out your package&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">python3 -m pip install your-package
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once the installation has finished you can test it out by importing your
package.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ python3
&amp;gt;&amp;gt;&amp;gt; from example_package import your_function
&amp;gt;&amp;gt;&amp;gt; your_function.do_something&lt;span style="color:#f92672">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Congrats, you&amp;rsquo;ve successfully published your pacakge to PyPI. 🎉&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="bonus-automation-with-github-packages">
Bonus: Automation with GitHub Packages
&lt;a class="heading-link" href="#bonus-automation-with-github-packages">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>You&amp;rsquo;ll probably want to automate this process as part of your CI/CD pipeline.
Here&amp;rsquo;s how to set it up using GitHub Actions.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Create a &lt;a href="https://pypi.org/manage/account/#api-tokens">new PyPI API token&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Add the API token as a secret to your target GitHub repository. You can find
this under Settings &amp;gt; Secrets for your repo. Give the secret a name e.g.
&lt;code>PYPI_API_TOKEN&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Create a GitHub action workflow file in your repo at
&lt;code>.github/workflows/pypi-publish.yml&lt;/code> with the following contents:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Publish package to PyPI&lt;/span>
&lt;span style="color:#f92672">on&lt;/span>:
&lt;span style="color:#f92672">release&lt;/span>:
&lt;span style="color:#f92672">types&lt;/span>: [&lt;span style="color:#ae81ff">created]&lt;/span>
&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;span style="color:#f92672">build-n-publish&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Build and publish to PyPI&lt;/span>
&lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-18.04&lt;/span>
&lt;span style="color:#f92672">steps&lt;/span>:
- &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@master&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Set up Python 3.7&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/setup-python@v1&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">python-version&lt;/span>: &lt;span style="color:#ae81ff">3.7&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Install pypa/build&lt;/span>
&lt;span style="color:#f92672">run&lt;/span>: &amp;gt;-&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> python -m
&lt;/span>&lt;span style="color:#e6db74"> pip install
&lt;/span>&lt;span style="color:#e6db74"> build
&lt;/span>&lt;span style="color:#e6db74"> --user&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Build a binary wheel and a source tarball&lt;/span>
&lt;span style="color:#f92672">run&lt;/span>: &amp;gt;-&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> python -m
&lt;/span>&lt;span style="color:#e6db74"> build
&lt;/span>&lt;span style="color:#e6db74"> --sdist
&lt;/span>&lt;span style="color:#e6db74"> --wheel
&lt;/span>&lt;span style="color:#e6db74"> --outdir dist/
&lt;/span>&lt;span style="color:#e6db74"> .&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Publish package&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">pypa/gh-action-pypi-publish@release/v1&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">password&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.PYPI_API_TOKEN }}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This workflow is triggered when a new release is created but you can also
configure it to be triggered when a different event happens e.g. when a
new tag gets pushed. Refer to the &lt;a href="https://docs.github.com/en/actions">GitHub Actions documentation&lt;/a>
for more configuration options.&lt;/p>
&lt;p>That&amp;rsquo;s it, time to get publishing.&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Hacktoberfest 2020 Retrospective</title><link>https://jduabe.dev/posts/2021/hacktoberfest-2020/</link><pubDate>Sat, 23 Jan 2021 12:50:21 +0800</pubDate><guid>https://jduabe.dev/posts/2021/hacktoberfest-2020/</guid><description>&lt;figure>
&lt;img
src="https://res.cloudinary.com/j4ckofalltrades/image/upload/c_limit,w_500/v1611377061/blog/20210123/hacktoberfest_y899nk.jpg"
alt="hacktoberfest_shirt">
&lt;/figure>
&lt;p>This one&amp;rsquo;s long overdue and when the swag arrived last week I figured I really
need to get this done.&lt;/p>
&lt;p>The past year has been tough to say the least and getting to write code for
fun while helping out the open-source community was a very welcome distraction.&lt;/p>
&lt;p>Though I have been programming for a while this was my first time participating
in Hacktoberfest and contributing to open-source in general, it was nice to
get to talk to and interact with maintainers and other like-minded individuals
who are passionate about code and giving back to the community.&lt;/p>
&lt;p>Even with all the drama that surrounded this past year&amp;rsquo;s iteration I&amp;rsquo;d say this
was a positive experience overall, and I look forward to joining this year&amp;rsquo;s
iteration.&lt;/p>
&lt;p>Here are some of the projects I found interesting and contributed to (and still
try to contribute to):&lt;/p>
&lt;p>&lt;a href="https://github.com/trinodb/trino">&lt;img src="https://github-readme-stats.vercel.app/api/pin/?username=trinodb&amp;amp;repo=trino&amp;amp;theme=dark" alt="trino">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/strongbox/strongbox">&lt;img src="https://github-readme-stats.vercel.app/api/pin/?username=strongbox&amp;amp;repo=strongbox&amp;amp;theme=dark" alt="strongbox">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/oshi/oshi">&lt;img src="https://github-readme-stats.vercel.app/api/pin/?username=oshi&amp;amp;repo=oshi&amp;amp;theme=dark" alt="oshi">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/jayehernandez/letra-extension">&lt;img src="https://github-readme-stats.vercel.app/api/pin/?username=jayehernandez&amp;amp;repo=letra-extension&amp;amp;theme=dark" alt="letra-extension">&lt;/a>&lt;/p>
&lt;p>Happy hacking!&lt;/p></description></item></channel></rss>